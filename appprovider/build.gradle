apply plugin: 'com.android.application'

def projectName = "Ember"
def type = "Medics_Provider"
def verCode = 1
def verName = "0.1.0"
def outputPath = "E:\\AndroidDev\\Builds\\" + projectName + "\\"
def outputName = projectName + "_v_" + verName + "_" + getDate() + ".apk"
def proguard = false

android {
    compileSdkVersion 27
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 27
        versionCode verCode
        versionName verName
        flavorDimensions "default"
        applicationId "com.ember.medics"
        multiDexEnabled true

        def addConstant = { constantName, constantValue ->
            manifestPlaceholders = [(constantName): constantValue]
            buildConfigField "String", "${constantName}", "\"${constantValue}\""
        }
        addConstant("GOOGLE_API_KEY", "AIzaSyB4Lr5filcplh4r4vau5KNEWS1IwzRxLjI")
    }

    signingConfigs {
        debug {
            storeFile file('..\\biz4solutions.jks')
            keyAlias 'biz4solutions'
            keyPassword 'biz4solutions'
            storePassword 'biz4solutions'
        }
        release {
            storeFile file('..\\biz4solutions.jks')
            keyAlias 'biz4solutions'
            keyPassword 'biz4solutions'
            storePassword 'biz4solutions'
        }
    }
    buildTypes {
        release {
            minifyEnabled proguard
            shrinkResources proguard
            useProguard proguard
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
            /*minifyEnabled true
            shrinkResources true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug*/
        }
    }
    dataBinding {
        enabled = true
    }
    lintOptions {
        abortOnError false
    }
    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g" // 2g should be also OK
    }
    productFlavors {
        dev {
        }
        qaTest {
        }
        staging {
        }
        prod {
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def ofile = output.outputFile
            outputName = ofile.name.replace("-", "_")
            outputName = outputName.replace("app", projectName)
            outputName = outputName.replace(".apk", "_v_" + verName + "(" + variant.versionCode + ")_" + getDate() + ".apk")
            outputFileName = outputName
            output.assemble.doLast { assemble ->
                //copy or move apk file to other directories
                def outputName1 = projectName + "_" +
                        type + "_" +
                        variant.productFlavors[0].name + "_" +
                        variant.buildType.name + "_" +
                        defaultConfig.versionName + "(" +
                        defaultConfig.versionCode + ")_" +
                        getDate() + ".apk"
                copy {
                    from output.outputFile
                    into outputPath
                    rename { String fileName ->
                        outputName1
                    }
                }
            }
        }
        variant.assemble.doLast { assemble ->

            // Copy the mapping file if Proguard is turned on for this build
            if (proguard && variant.getBuildType().name.matches("release")) {
                // set the base filename
                def newName = projectName + "_" +
                        type + "_" +
                        variant.productFlavors[0].name + "_" +
                        variant.buildType.name + "_" +
                        defaultConfig.versionName + "(" +
                        defaultConfig.versionCode + ")_" +
                        getDate() + "_mapping.txt"
                copy {
                    from variant.mappingFile
                    into outputPath + "mapping\\"
                    rename { String fileName ->
                        newName
                    }
                }
            }
        }
    }
    packagingOptions
            {
                exclude '.readme'
                exclude 'LICENSE.txt'
                exclude 'META-INF/DEPENDENCIES'
                exclude 'META-INF/DEPENDENCIES.txt'
                exclude 'META-INF/LGPL2.1'
                exclude 'META-INF/LICENSE'
                exclude 'META-INF/LICENSE.txt'
                exclude 'META-INF/NOTICE'
                exclude 'META-INF/NOTICE.txt'
                exclude 'META-INF/README.txt'
                exclude 'META-INF/MANIFEST.MF'
                exclude 'META-INF/dependencies.txt'
                exclude 'META-INF/license.txt'
                exclude 'META-INF/notice.txt'
                exclude 'META-INF/services/javax.annotation.processing.Processor'
            }
}
task cleanExtra(type: Delete) {
    delete outputPath + outputName
}
clean.dependsOn(cleanExtra)

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('ddMMMyyyy')
    return formattedDate
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.google.android.gms:play-services-places:16.0.0' //google places
    implementation 'com.google.maps.android:android-maps-utils:0.4'
    implementation 'com.google.android.gms:play-services-maps:16.0.0' // Google Map Integration
    implementation 'com.google.android.gms:play-services-location:16.0.0'// Google Map Integration
    implementation 'com.google.firebase:firebase-core:16.0.4' //firebase core
    implementation 'com.google.firebase:firebase-messaging:17.3.3' // Firebase notification
    api project(':loginlib')
    api project(':opentok-sdk')
    api project(":profile")
}
apply plugin: 'com.google.gms.google-services'                    // Firebase push notification